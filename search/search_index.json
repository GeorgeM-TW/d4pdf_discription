{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"d4pdf\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046!! d4pdf\u306e\u4f7f\u7528\u624b\u9806 1. \u5909\u6570\u3092\u6c7a\u3081\u3066\u307b\u3057\u3044\u30c7\u30fc\u30bf\u3092\u5207\u308a\u51fa\u305d\u3046\uff01 - DIAS\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 Step1 : DIAS\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332 DIAS\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u753b\u9762 \u304b\u3089\u5fc5\u8981\u60c5\u5831\u3092\u5165\u529b\u3057\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210 Step2 : DIAS\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 DIAS\u30c7\u30fc\u30bf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u304b\u3089\u6b32\u3057\u3044\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 SUMMARY \u30fb\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30fb\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u969b\u3001\u9078\u629e\u3059\u308b\u60c5\u5831\u306f\u4ee5\u4e0b\u306e5\u3064 \u3000\u30001.\u5b9f\u9a13\uff08\u30e2\u30c7\u30eb\uff09 \u3000\u30002.\u671f\u9593 \u3000\u30003.\u5909\u6570 \u3000\u30004.\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb \u3000\u30005.\u9818\u57df 2. Python\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u3057\u3088\u3046\uff01 - \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u306eCSV\u5316 \u30fb \u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u3057\u3088\u3046 DIAS\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fTAR\u30d5\u30a1\u30a4\u30eb\u3092Python\u3092\u4f7f\u3063\u3066\u89e3\u51cd\u3057\u307e\u3059\u3002 SUMMARY \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u306f\u300c\u30a2\u30c9\u30ec\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30b3\u30d4\u30fc\u300d\u304b\u3089\u5165\u624b import tarfile import glob import os cd = input ( \"\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" ) print ( \"Processing...\" ) os . chdir ( cd ) path_list = glob . glob ( \"*.tar\" ) for path1 in path_list : path2 = path1 . replace ( \".tar\" , \"_open\" ) with tarfile . open ( path1 , 'r' ) as t : t . extractall ( path2 ) print ( \"Completed\" ) \u30fbCSV\u306b\u5909\u63db\u3057\u3088\u3046 WARNING \u6c17\u6e29\u3068\u964d\u6c34\u91cf\u3067\u306f\u30c7\u30fc\u30bf\u306e\u5358\u4f4d\u304c\u7570\u306a\u308b\u305f\u3081\u540c\u3058\u30b3\u30fc\u30c9\u3067\u306f\u89e3\u51cd\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u3001\u6c17\u6e29\u3068\u964d\u6c34\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u9593\u9055\u3048\u306a\u3044\u3088\u3046\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u2460 CSV\u306b\u5909\u63db\u3057\u3088\u3046\uff5e\u6c17\u6e29\u7de8\uff5e SUMMARY \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066Enter \u30fbDAT\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b0\u30ea\u30c3\u30c9\u306e\u6570\uff08x\u3068y\u306e\u5024\uff09\u3092\u78ba\u8a8d\u3057\u5165\u529b import csv import struct import glob import os cd = input ( \"\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" ) os . chdir ( cd ) print ( \"Processing...\" ) #dat\u30d5\u30a1\u30a4\u30eb\u3092\u7d50\u5408 data_list = glob . glob ( \"*.dat\" ) with open ( \"tem.dat\" , 'wb' ) as file : for data in data_list : with open ( data , 'rb' ) as fin : file . write ( fin . read ()) f = open ( \"tem.dat\" , 'rb' ) g = open ( \"average_day_tem.csv\" , 'w' , newline = '' ) writer = csv . writer ( g ) x = input ( \"x\u306e\u5217\u6570=\" ) y = input ( \"y\u306e\u884c\u6570=\" ) x = int ( x ) y = int ( y ) ctl = \"\" file_eof = \"\" counter = 0 hour = 0 day = 0 kosi = x * y tem_d = 0.0 for t in range ( 100 * 365 * kosi ): file_eof = f . read ( 4 ) counter = counter + 1 if not file_eof : break counter = counter - 1 day = int ( counter / ( kosi )) print ( 'End Of File ' , day , \"Days\" ) ctl = \"Days=\" + str ( day ) writer . writerow ([ ctl ]) ctl = \"Y=\" + str ( y ) writer . writerow ([ ctl ]) ctl = \"X=\" + str ( x ) writer . writerow ([ ctl ]) f . close () f = open ( \"tem.dat\" , 'rb' ) tem_d = [ 0.0 ] * kosi for t in range ( day ): for i in range ( kosi ): data = f . read ( 4 ) if not data : break tem_tpl = struct . unpack ( \">f\" , data ) tem_d [ i ] = tem_tpl [ 0 ] - 273 #K\u3092\u2103\u306b\u5909\u63db print ( tem_d ) writer . writerow ( tem_d ) print ( \"end\" ) f . close () g . close () \u2461 CSV\u306b\u5909\u63db\u3057\u3088\u3046\uff5e\u964d\u96e8\u7de8\uff5e SUMMARY \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b \u30fbDAT\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b0\u30ea\u30c3\u30c9\u306e\u6570\uff08x\u3068y\u306e\u5024\uff09\u3092\u78ba\u8a8d\u3057\u5165\u529b import csv import struct import glob import os cd = input ( \"\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" ) os . chdir ( cd ) print ( \"Processing...\" ) #dat\u30d5\u30a1\u30a4\u30eb\u3092\u7d50\u5408 data_list = glob . glob ( \"*.dat\" ) with open ( \"pre_day.dat\" , 'wb' ) as file : for data in data_list : with open ( data , 'rb' ) as fin : file . write ( fin . read ()) f = open ( \"pre_day.dat\" , 'rb' ) g = open ( \"total_day_pre.csv\" , 'w' , newline = '' ) writer = csv . writer ( g ) x = input ( \"x\u306e\u5217\u6570=\" ) y = input ( \"y\u306e\u884c\u6570=\" ) x = int ( x ) y = int ( y ) ctl = \"\" file_eof = \"\" counter = 0 hour = 0 day = 0 kosi = x * y rain_d = 0.0 for t in range ( 100 * 365 * kosi ): file_eof = f . read ( 4 ) counter = counter + 1 if not file_eof : break counter = counter - 1 day = int ( counter / ( kosi )) print ( 'End Of File ' , day , \"Days\" ) ctl = \"Days=\" + str ( day ) writer . writerow ([ ctl ]) ctl = \"Y=\" + str ( y ) writer . writerow ([ ctl ]) ctl = \"X=\" + str ( x ) writer . writerow ([ ctl ]) f . close () f = open ( \"pre_day.dat\" , 'rb' ) rain_d = [ 0.0 ] * kosi for t in range ( day ): for i in range ( kosi ): data = f . read ( 4 ) if not data : break rain_tpl = struct . unpack ( \">f\" , data ) rain_d [ i ] = rain_tpl [ 0 ] * 3600 * 24 #kg/m2/s\u3092mm/day\u306b\u5909\u63db print ( rain_d ) print ( type ( rain_d )) writer . writerow ( rain_d ) print ( \"end\" ) f . close () g . close () WARNING CSV\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u306f\u300c\u30e2\u30c7\u30eb\u540d_\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u6570_ \u65e5\u5e73\u5747\u6c17\u6e29 \u300d\u306e\u3088\u3046\u306a\u5f62\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff01 \u30c7\u30fc\u30bf\u5206\u6790\u306e\u969b\u306b\u4f7f\u7528\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3001\u5e73\u5747\u6c17\u6e29\u30fb\u6700\u9ad8\u6c17\u6e29\u30fb\u6700\u4f4e\u6c17\u6e29\u3092\u53c2\u7167\u3057\u3066\u8a08\u7b97\u3057\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002 3. \u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u3088\u3046\uff01 - CSV\u304b\u3089\u306e\u30c7\u30fc\u30bf\u62bd\u51fa\u3001\u307e\u3068\u3081 \u30fb \u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u3088\u3046 SUMMARY \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b \u30fb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30b5\u30a4\u30c8\uff08lao or cam\uff09\u3092\u78ba\u8a8d\u3057\u5165\u529b \u30fb\u958b\u59cb\u5e74\u3068\u7d42\u4e86\u5e74\u3092\u305d\u308c\u305e\u308c\u5165\u529b \u30fb\u62bd\u51fa\u3057\u305f\u3044\u30b0\u30ea\u30c3\u30c9\u756a\u53f7\u3092\u5165\u529b import numpy as np import pandas as pd import glob import os cd = input ( \"\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" ) os . chdir ( cd ) #\u5834\u6240 country_list = { \"cam\" : [ 10.9516 , 104.625 ], \"lao\" : [ 16.55 , 104.65 ]} place = country_list [ input ( \"\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\uff08lao or cam\uff09\" )] #\u671f\u9593\u306e\u8a2d\u5b9a y_start = int ( input ( \"\u958b\u59cb\u5e74(yyyy)\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\" )) d_start = str ( y_start ) + \"/01/01\" y_end = int ( input ( \"\u7d42\u4e86\u5e74(yyyy)\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\" )) d_end = str ( y_end ) + \"/12/31\" days = pd . date_range ( start = d_start , end = d_end ) period = y_end - y_start + 1 #\u30b0\u30ea\u30c3\u30c9\u756a\u53f7\u306e\u6307\u5b9a n_grid = int ( input ( \"\u62bd\u51fa\u3057\u305f\u3044\u30b0\u30ea\u30c3\u30c9\u756a\u53f7\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\" )) print ( \"Processing...\" ) fileName1 = \"\u30c7\u30fc\u30bf\u307e\u3068\u3081_\u30e2\u30c7\u30eb\u540d_\u56fd\u540d.xlsx\" fileName2 = \"\u30e2\u30c7\u30eb\u540d_\u56fd\u540d.xlsx\" writer = pd . ExcelWriter ( fileName1 ) #CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u30c7\u30fc\u30bf\u62bd\u51fa y_index = list ( range ( y_start , y_end + 1 , 1 )) m_index = list ( range ( 1 , 12 + 1 , 1 )) file_list = glob . glob ( \"*.csv\" ) for file in file_list : sheet = file . replace ( \".csv\" , \"\" ) with open ( file , \"r\" ) as f : col_names = [ 'c {0:02d} ' . format ( i ) for i in range ( 100 )] lst = pd . read_csv ( f , delimiter = \",\" , names = col_names , dtype = 'unicode' ) data = lst . iloc [ 3 :, ( n_grid - 1 )] . astype ( float ) . to_list () raw_data = pd . DataFrame ( data , index = days , columns = [ \"Value\" ]) A = y_start m_sum = [] m_ave = [] m_max = [] m_min = [] ave_m = [] y_ave = [] y_max = [] y_min = [] cal_a = [] con_r = [] con_d = [] abn_r = [] abn_t = [] max_ave = [] min_ave = [] #\u767e\u5206\u4f4d\u6570\u306e\u8a08\u7b97 percentile_list = [ .25 , .5 , .75 , .95 ] use_cols = [ \"min\" , \"25%\" , \"50%\" , \"75%\" , \"95%\" , \"max\" ] df_per = raw_data . describe ( percentile_list ) . loc [ use_cols ,:] #\u6708\u3054\u3068\u306e\u5024\u306e\u8a08\u7b97 change_data = raw_data . set_index ([ raw_data . index . year , raw_data . index . month , raw_data . index ]) change_data . index . names = [ 'Year' , 'Month' , 'date' ] ave_mon = change_data . groupby ( level = ( 'Year' , 'Month' )) . mean () max_mon = change_data . groupby ( level = ( 'Year' , 'Month' )) . max () min_mon = change_data . groupby ( level = ( 'Year' , 'Month' )) . min () sum_mon = change_data . groupby ( level = ( 'Year' , 'Month' )) . sum () mon_ave = change_data . groupby ( level = ( 'Month' )) . mean () sum_ave = change_data . groupby ( level = ( 'Month' )) . sum () / period #\u9023\u7d9a\u964d\u96e8\u65e5\u6570\u3001\u9023\u7d9a\u5e72\u5929\u65e5\u6570\u7528\u30c7\u30fc\u30bf bool1 = ( raw_data >= 1 ) bool1 = ( bool1 [ \"Value\" ] . to_list ()) for i in range ( len ( bool1 ) - 1 ): if bool1 [ i + 1 ] == 1 : bool1 [ i + 1 ] += bool1 [ i ] rain_data = pd . DataFrame ( bool1 , index = days , columns = [ \"Value\" ]) bool2 = ( raw_data < 1 ) bool2 = ( bool2 [ \"Value\" ] . to_list ()) for i in range ( len ( bool2 ) - 1 ): if bool2 [ i + 1 ] == 1 : bool2 [ i + 1 ] += bool2 [ i ] drought_data = pd . DataFrame ( bool2 , index = days , columns = [ \"Value\" ]) while A < y_end + 1 : #\u5024\u3092\u304d\u308c\u3044\u306b\u4e26\u3073\u5909\u3048\u308b m_ave . append ( ave_mon . loc [ A , \"Value\" ] . to_list ()) m_max . append ( max_mon . loc [ A , \"Value\" ] . to_list ()) m_min . append ( min_mon . loc [ A , \"Value\" ] . to_list ()) m_sum . append ( sum_mon . loc [ A , \"Value\" ] . to_list ()) #\u5e74\u3054\u3068\u306e\u5024\u306e\u8a08\u7b97 x = raw_data [ raw_data . index . year == A ] ave_y = float ( x . mean ()) max_y = float ( x . max ()) min_y = float ( x . min ()) y_ave . append ( ave_y ) y_max . append ( max_y ) y_min . append ( min_y ) #\u6975\u7aef\u73fe\u8c61\u306e\u8a08\u7b97 if min_y == 0 : #\u9023\u7d9a\u964d\u96e8\u65e5\u6570 y = rain_data [ rain_data . index . year == A ] y = ( y [ \"Value\" ] . to_list ()) continuous_rain = max ( y ) con_r . append ( continuous_rain ) #\u9023\u7d9a\u5e72\u5929\u65e5\u6570 z = drought_data [ drought_data . index . year == A ] z = ( z [ \"Value\" ] . to_list ()) continuous_drought = max ( z ) con_d . append ( continuous_drought ) #\u7570\u5e38\u964d\u96e8\u65e5\u6570(30mm\u4ee5\u4e0a) bool3 = ( x >= 30 ) abonormal_rain = bool3 . sum () abn_r . append ( abonormal_rain ) else : #\u7570\u5e38\u9ad8\u6e29\u65e5\u6570(35\u2103\u4ee5\u4e0a) bool4 = ( x >= 35 ) abnormal_temperature = bool4 . sum () abn_t . append ( abnormal_temperature ) A = A + 1 #\u6708\u3054\u3068\u306e\u6700\u9ad8\u6700\u4f4e\u306e\u5e73\u5747 t = 0 while t < 12 : max_ave . append ( sum ( np . array ( m_max )[:, t ]) / period ) min_ave . append ( sum ( np . array ( m_min )[:, t ]) / period ) t = t + 1 #\u5168\u4f53\u306e\u5e73\u5747\u30fb\u6700\u9ad8\u306e\u5e73\u5747\u30fb\u6700\u4f4e\u306e\u5e73\u5747\u306e\u8a08\u7b97 cal_a . append ( sum ( y_ave ) / period ) cal_a . append ( sum ( y_max ) / period ) cal_a . append ( sum ( y_min ) / period ) cr = float ( sum ( con_r [ 1 :]) / ( period - 1 )) cd = float ( sum ( con_d [ 1 :]) / ( period - 1 )) ar = float ( sum ( abn_r ) / period ) at = float ( sum ( abn_t ) / period ) #\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4f5c\u6210 df_m_ave = pd . DataFrame ( m_ave , columns = pd . Index ( m_index ), index = pd . Index ( y_index )) df_m_max = pd . DataFrame ( m_max , columns = pd . Index ( m_index ), index = pd . Index ( y_index )) df_m_min = pd . DataFrame ( m_min , columns = pd . Index ( m_index ), index = pd . Index ( y_index )) df_m_sum = pd . DataFrame ( m_sum , columns = pd . Index ( m_index ), index = pd . Index ( y_index )) df_y = pd . DataFrame ([ y_ave , y_max , y_min , y_index ], index = [ \"Ave\" , \"Max\" , \"Min\" , \"Year\" ]) df_y = df_y . T . set_index ( \"Year\" ) df_max_ave = pd . DataFrame ( max_ave ) df_min_ave = pd . DataFrame ( min_ave ) df_cal = pd . DataFrame ( cal_a ) df_place = pd . DataFrame ( place ) df_ext_w = pd . DataFrame ([ cr , cd , ar , at ], index = [ \"Continuous Rain\" , \"Continuous Drought\" , \"Abnormal Rain\" , \"Abnormal Temperature\" ]) #\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f pd . DataFrame ([ \"Ave\" ]) . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 2 , startcol = 9 ) pd . DataFrame ([ \"Max\" ]) . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 69 , startcol = 9 ) pd . DataFrame ([ \"Min\" ]) . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 136 , startcol = 9 ) pd . DataFrame ([ \"Sum\" ]) . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 203 , startcol = 9 ) raw_data . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 2 , startcol = 1 ) df_y . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 2 , startcol = 4 ) df_place . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 1 , startcol = 1 ) df_cal . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 1 , startcol = 5 ) df_per . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 69 , startcol = 4 ) df_m_ave . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 2 , startcol = 9 ) df_m_max . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 69 , startcol = 9 ) df_m_min . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 136 , startcol = 9 ) df_m_sum . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 203 , startcol = 9 ) mon_ave . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 1 , startcol = 10 ) df_max_ave . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 68 , startcol = 10 ) df_min_ave . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 135 , startcol = 10 ) sum_ave . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 202 , startcol = 10 ) df_ext_w . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 78 , startcol = 4 ) writer . save () #\u30c7\u30fc\u30bf\u307e\u3068\u3081\u30b7\u30fc\u30c8\u306e\u4f5c\u6210 writer2 = pd . ExcelWriter ( fileName2 ) prof_data = place prof_data . append ( n_grid ) summary_table1 = [] summary_table2 = [] summary_table3 = [] index_st1 = [ \"\u65e5\u5e73\u5747\u6c17\u6e29\" , \"\u65e5\u6700\u9ad8\u6c17\u6e29\" , \"\u65e5\u6700\u4f4e\u6c17\u6e29\" , \"\u65e5\u6700\u5927\u964d\u6c34\u91cf\" , \"\u65e5\u6700\u5c11\u964d\u6c34\u91cf\" , \"\u9023\u7d9a\u964d\u96e8\u65e5\u6570\" , \"\u9023\u7d9a\u5e72\u5929\u65e5\u6570\" , \"\u7570\u5e38\u9ad8\u6e29\u65e5\u6570\" , \"\u7570\u5e38\u964d\u6c34\u65e5\u6570\" ] index_st2 = [ \"\u6708\u5225\u5e73\u5747\u6c17\u6e29\" , \"\u6708\u5225\u6700\u9ad8\u6c17\u6e29\" , \"\u6708\u5225\u6700\u4f4e\u6c17\u6e29\" ] index_st3 = [ \"\u6708\u5225\u964d\u6c34\u91cf\" ] df_sheet_all = pd . read_excel ( '\u30c7\u30fc\u30bf\u307e\u3068\u3081_\u30e2\u30c7\u30eb\u540d_\u56fd\u540d.xlsx' , sheet_name = None , index_col = 0 ) for i in df_sheet_all . keys (): if \"\u5e73\u5747\u6c17\u6e29\" in i : TAve = i elif \"\u6700\u9ad8\u6c17\u6e29\" in i : TMax = i elif \"\u6700\u4f4e\u6c17\u6e29\" in i : TMin = i else : Pre = i df_Tave = df_sheet_all [ TAve ] df_TMax = df_sheet_all [ TMax ] df_TMin = df_sheet_all [ TMin ] df_Pre = df_sheet_all [ Pre ] summary_table1 . append ( df_Tave . iloc [ 0 , 4 ]) summary_table1 . append ( df_TMax . iloc [ 0 , 4 ]) summary_table1 . append ( df_TMin . iloc [ 0 , 4 ]) summary_table1 . append ( df_Pre . iloc [ 0 , 5 ]) summary_table1 . append ( df_Pre . iloc [ 0 , 6 ]) summary_table1 . append ( df_Pre . iloc [ 78 , 4 ]) summary_table1 . append ( df_Pre . iloc [ 79 , 4 ]) summary_table1 . append ( df_TMax . iloc [ 81 , 4 ]) summary_table1 . append ( df_Pre . iloc [ 80 , 4 ]) summary_table2 . append ( df_Tave . iloc [ 0 , 9 : 21 ] . to_list ()) summary_table2 . append ( df_TMax . iloc [ 67 , 9 : 21 ] . to_list ()) summary_table2 . append ( df_TMin . iloc [ 134 , 9 : 21 ] . to_list ()) summary_table3 . append ( df_Pre . iloc [ 201 , 9 : 21 ] . to_list ()) df_summary1 = pd . DataFrame ( summary_table1 , index = pd . Index ( index_st1 )) df_summary2 = pd . DataFrame ( summary_table2 , index = pd . Index ( index_st2 ), columns = pd . Index ( m_index )) df_summary3 = pd . DataFrame ( summary_table3 , index = pd . Index ( index_st3 ), columns = pd . Index ( m_index )) df_prof_data = pd . DataFrame ( prof_data , index = [ \"\u7def\u5ea6\" , \"\u7d4c\u5ea6\" , \"\u30b0\u30ea\u30c3\u30c9\u756a\u53f7\" ]) df_summary1 . to_excel ( writer2 , sheet_name = \"\u307e\u3068\u3081\" , index = True , header = False , startrow = 1 , startcol = 1 ) df_summary2 . to_excel ( writer2 , sheet_name = \"\u307e\u3068\u3081\" , index = True , header = True , startrow = 1 , startcol = 4 ) df_summary3 . to_excel ( writer2 , sheet_name = \"\u307e\u3068\u3081\" , index = True , header = True , startrow = 6 , startcol = 4 ) df_prof_data . to_excel ( writer2 , sheet_name = \"\u307e\u3068\u3081\" , index = True , header = False , startrow = 11 , startcol = 1 ) writer2 . save () print ( \"Completed\" )","title":"d4pdf\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046!!"},{"location":"#d4pdf","text":"","title":"d4pdf\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046!!"},{"location":"#d4pdf_1","text":"","title":"d4pdf\u306e\u4f7f\u7528\u624b\u9806"},{"location":"#1-dias","text":"Step1 : DIAS\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332 DIAS\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u753b\u9762 \u304b\u3089\u5fc5\u8981\u60c5\u5831\u3092\u5165\u529b\u3057\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210 Step2 : DIAS\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 DIAS\u30c7\u30fc\u30bf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u304b\u3089\u6b32\u3057\u3044\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 SUMMARY \u30fb\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30fb\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u969b\u3001\u9078\u629e\u3059\u308b\u60c5\u5831\u306f\u4ee5\u4e0b\u306e5\u3064 \u3000\u30001.\u5b9f\u9a13\uff08\u30e2\u30c7\u30eb\uff09 \u3000\u30002.\u671f\u9593 \u3000\u30003.\u5909\u6570 \u3000\u30004.\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb \u3000\u30005.\u9818\u57df","title":"1. \u5909\u6570\u3092\u6c7a\u3081\u3066\u307b\u3057\u3044\u30c7\u30fc\u30bf\u3092\u5207\u308a\u51fa\u305d\u3046\uff01 - DIAS\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"#2-python-csv","text":"","title":"2. Python\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u3057\u3088\u3046\uff01 - \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u306eCSV\u5316"},{"location":"#_1","text":"DIAS\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fTAR\u30d5\u30a1\u30a4\u30eb\u3092Python\u3092\u4f7f\u3063\u3066\u89e3\u51cd\u3057\u307e\u3059\u3002 SUMMARY \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u306f\u300c\u30a2\u30c9\u30ec\u30b9\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30b3\u30d4\u30fc\u300d\u304b\u3089\u5165\u624b import tarfile import glob import os cd = input ( \"\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" ) print ( \"Processing...\" ) os . chdir ( cd ) path_list = glob . glob ( \"*.tar\" ) for path1 in path_list : path2 = path1 . replace ( \".tar\" , \"_open\" ) with tarfile . open ( path1 , 'r' ) as t : t . extractall ( path2 ) print ( \"Completed\" )","title":"\u30fb\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u3057\u3088\u3046"},{"location":"#csv","text":"WARNING \u6c17\u6e29\u3068\u964d\u6c34\u91cf\u3067\u306f\u30c7\u30fc\u30bf\u306e\u5358\u4f4d\u304c\u7570\u306a\u308b\u305f\u3081\u540c\u3058\u30b3\u30fc\u30c9\u3067\u306f\u89e3\u51cd\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u3001\u6c17\u6e29\u3068\u964d\u6c34\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u9593\u9055\u3048\u306a\u3044\u3088\u3046\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30fbCSV\u306b\u5909\u63db\u3057\u3088\u3046"},{"location":"#1-csv","text":"SUMMARY \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066Enter \u30fbDAT\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b0\u30ea\u30c3\u30c9\u306e\u6570\uff08x\u3068y\u306e\u5024\uff09\u3092\u78ba\u8a8d\u3057\u5165\u529b import csv import struct import glob import os cd = input ( \"\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" ) os . chdir ( cd ) print ( \"Processing...\" ) #dat\u30d5\u30a1\u30a4\u30eb\u3092\u7d50\u5408 data_list = glob . glob ( \"*.dat\" ) with open ( \"tem.dat\" , 'wb' ) as file : for data in data_list : with open ( data , 'rb' ) as fin : file . write ( fin . read ()) f = open ( \"tem.dat\" , 'rb' ) g = open ( \"average_day_tem.csv\" , 'w' , newline = '' ) writer = csv . writer ( g ) x = input ( \"x\u306e\u5217\u6570=\" ) y = input ( \"y\u306e\u884c\u6570=\" ) x = int ( x ) y = int ( y ) ctl = \"\" file_eof = \"\" counter = 0 hour = 0 day = 0 kosi = x * y tem_d = 0.0 for t in range ( 100 * 365 * kosi ): file_eof = f . read ( 4 ) counter = counter + 1 if not file_eof : break counter = counter - 1 day = int ( counter / ( kosi )) print ( 'End Of File ' , day , \"Days\" ) ctl = \"Days=\" + str ( day ) writer . writerow ([ ctl ]) ctl = \"Y=\" + str ( y ) writer . writerow ([ ctl ]) ctl = \"X=\" + str ( x ) writer . writerow ([ ctl ]) f . close () f = open ( \"tem.dat\" , 'rb' ) tem_d = [ 0.0 ] * kosi for t in range ( day ): for i in range ( kosi ): data = f . read ( 4 ) if not data : break tem_tpl = struct . unpack ( \">f\" , data ) tem_d [ i ] = tem_tpl [ 0 ] - 273 #K\u3092\u2103\u306b\u5909\u63db print ( tem_d ) writer . writerow ( tem_d ) print ( \"end\" ) f . close () g . close ()","title":"\u2460  CSV\u306b\u5909\u63db\u3057\u3088\u3046\uff5e\u6c17\u6e29\u7de8\uff5e"},{"location":"#2-csv","text":"SUMMARY \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b \u30fbDAT\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b0\u30ea\u30c3\u30c9\u306e\u6570\uff08x\u3068y\u306e\u5024\uff09\u3092\u78ba\u8a8d\u3057\u5165\u529b import csv import struct import glob import os cd = input ( \"\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" ) os . chdir ( cd ) print ( \"Processing...\" ) #dat\u30d5\u30a1\u30a4\u30eb\u3092\u7d50\u5408 data_list = glob . glob ( \"*.dat\" ) with open ( \"pre_day.dat\" , 'wb' ) as file : for data in data_list : with open ( data , 'rb' ) as fin : file . write ( fin . read ()) f = open ( \"pre_day.dat\" , 'rb' ) g = open ( \"total_day_pre.csv\" , 'w' , newline = '' ) writer = csv . writer ( g ) x = input ( \"x\u306e\u5217\u6570=\" ) y = input ( \"y\u306e\u884c\u6570=\" ) x = int ( x ) y = int ( y ) ctl = \"\" file_eof = \"\" counter = 0 hour = 0 day = 0 kosi = x * y rain_d = 0.0 for t in range ( 100 * 365 * kosi ): file_eof = f . read ( 4 ) counter = counter + 1 if not file_eof : break counter = counter - 1 day = int ( counter / ( kosi )) print ( 'End Of File ' , day , \"Days\" ) ctl = \"Days=\" + str ( day ) writer . writerow ([ ctl ]) ctl = \"Y=\" + str ( y ) writer . writerow ([ ctl ]) ctl = \"X=\" + str ( x ) writer . writerow ([ ctl ]) f . close () f = open ( \"pre_day.dat\" , 'rb' ) rain_d = [ 0.0 ] * kosi for t in range ( day ): for i in range ( kosi ): data = f . read ( 4 ) if not data : break rain_tpl = struct . unpack ( \">f\" , data ) rain_d [ i ] = rain_tpl [ 0 ] * 3600 * 24 #kg/m2/s\u3092mm/day\u306b\u5909\u63db print ( rain_d ) print ( type ( rain_d )) writer . writerow ( rain_d ) print ( \"end\" ) f . close () g . close () WARNING CSV\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u306f\u300c\u30e2\u30c7\u30eb\u540d_\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u6570_ \u65e5\u5e73\u5747\u6c17\u6e29 \u300d\u306e\u3088\u3046\u306a\u5f62\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff01 \u30c7\u30fc\u30bf\u5206\u6790\u306e\u969b\u306b\u4f7f\u7528\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3001\u5e73\u5747\u6c17\u6e29\u30fb\u6700\u9ad8\u6c17\u6e29\u30fb\u6700\u4f4e\u6c17\u6e29\u3092\u53c2\u7167\u3057\u3066\u8a08\u7b97\u3057\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u2461 CSV\u306b\u5909\u63db\u3057\u3088\u3046\uff5e\u964d\u96e8\u7de8\uff5e"},{"location":"#3-csv","text":"","title":"3. \u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u3088\u3046\uff01 - CSV\u304b\u3089\u306e\u30c7\u30fc\u30bf\u62bd\u51fa\u3001\u307e\u3068\u3081"},{"location":"#_2","text":"SUMMARY \u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b \u30fb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30b5\u30a4\u30c8\uff08lao or cam\uff09\u3092\u78ba\u8a8d\u3057\u5165\u529b \u30fb\u958b\u59cb\u5e74\u3068\u7d42\u4e86\u5e74\u3092\u305d\u308c\u305e\u308c\u5165\u529b \u30fb\u62bd\u51fa\u3057\u305f\u3044\u30b0\u30ea\u30c3\u30c9\u756a\u53f7\u3092\u5165\u529b import numpy as np import pandas as pd import glob import os cd = input ( \"\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\" ) os . chdir ( cd ) #\u5834\u6240 country_list = { \"cam\" : [ 10.9516 , 104.625 ], \"lao\" : [ 16.55 , 104.65 ]} place = country_list [ input ( \"\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\uff08lao or cam\uff09\" )] #\u671f\u9593\u306e\u8a2d\u5b9a y_start = int ( input ( \"\u958b\u59cb\u5e74(yyyy)\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\" )) d_start = str ( y_start ) + \"/01/01\" y_end = int ( input ( \"\u7d42\u4e86\u5e74(yyyy)\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\" )) d_end = str ( y_end ) + \"/12/31\" days = pd . date_range ( start = d_start , end = d_end ) period = y_end - y_start + 1 #\u30b0\u30ea\u30c3\u30c9\u756a\u53f7\u306e\u6307\u5b9a n_grid = int ( input ( \"\u62bd\u51fa\u3057\u305f\u3044\u30b0\u30ea\u30c3\u30c9\u756a\u53f7\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\" )) print ( \"Processing...\" ) fileName1 = \"\u30c7\u30fc\u30bf\u307e\u3068\u3081_\u30e2\u30c7\u30eb\u540d_\u56fd\u540d.xlsx\" fileName2 = \"\u30e2\u30c7\u30eb\u540d_\u56fd\u540d.xlsx\" writer = pd . ExcelWriter ( fileName1 ) #CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u30c7\u30fc\u30bf\u62bd\u51fa y_index = list ( range ( y_start , y_end + 1 , 1 )) m_index = list ( range ( 1 , 12 + 1 , 1 )) file_list = glob . glob ( \"*.csv\" ) for file in file_list : sheet = file . replace ( \".csv\" , \"\" ) with open ( file , \"r\" ) as f : col_names = [ 'c {0:02d} ' . format ( i ) for i in range ( 100 )] lst = pd . read_csv ( f , delimiter = \",\" , names = col_names , dtype = 'unicode' ) data = lst . iloc [ 3 :, ( n_grid - 1 )] . astype ( float ) . to_list () raw_data = pd . DataFrame ( data , index = days , columns = [ \"Value\" ]) A = y_start m_sum = [] m_ave = [] m_max = [] m_min = [] ave_m = [] y_ave = [] y_max = [] y_min = [] cal_a = [] con_r = [] con_d = [] abn_r = [] abn_t = [] max_ave = [] min_ave = [] #\u767e\u5206\u4f4d\u6570\u306e\u8a08\u7b97 percentile_list = [ .25 , .5 , .75 , .95 ] use_cols = [ \"min\" , \"25%\" , \"50%\" , \"75%\" , \"95%\" , \"max\" ] df_per = raw_data . describe ( percentile_list ) . loc [ use_cols ,:] #\u6708\u3054\u3068\u306e\u5024\u306e\u8a08\u7b97 change_data = raw_data . set_index ([ raw_data . index . year , raw_data . index . month , raw_data . index ]) change_data . index . names = [ 'Year' , 'Month' , 'date' ] ave_mon = change_data . groupby ( level = ( 'Year' , 'Month' )) . mean () max_mon = change_data . groupby ( level = ( 'Year' , 'Month' )) . max () min_mon = change_data . groupby ( level = ( 'Year' , 'Month' )) . min () sum_mon = change_data . groupby ( level = ( 'Year' , 'Month' )) . sum () mon_ave = change_data . groupby ( level = ( 'Month' )) . mean () sum_ave = change_data . groupby ( level = ( 'Month' )) . sum () / period #\u9023\u7d9a\u964d\u96e8\u65e5\u6570\u3001\u9023\u7d9a\u5e72\u5929\u65e5\u6570\u7528\u30c7\u30fc\u30bf bool1 = ( raw_data >= 1 ) bool1 = ( bool1 [ \"Value\" ] . to_list ()) for i in range ( len ( bool1 ) - 1 ): if bool1 [ i + 1 ] == 1 : bool1 [ i + 1 ] += bool1 [ i ] rain_data = pd . DataFrame ( bool1 , index = days , columns = [ \"Value\" ]) bool2 = ( raw_data < 1 ) bool2 = ( bool2 [ \"Value\" ] . to_list ()) for i in range ( len ( bool2 ) - 1 ): if bool2 [ i + 1 ] == 1 : bool2 [ i + 1 ] += bool2 [ i ] drought_data = pd . DataFrame ( bool2 , index = days , columns = [ \"Value\" ]) while A < y_end + 1 : #\u5024\u3092\u304d\u308c\u3044\u306b\u4e26\u3073\u5909\u3048\u308b m_ave . append ( ave_mon . loc [ A , \"Value\" ] . to_list ()) m_max . append ( max_mon . loc [ A , \"Value\" ] . to_list ()) m_min . append ( min_mon . loc [ A , \"Value\" ] . to_list ()) m_sum . append ( sum_mon . loc [ A , \"Value\" ] . to_list ()) #\u5e74\u3054\u3068\u306e\u5024\u306e\u8a08\u7b97 x = raw_data [ raw_data . index . year == A ] ave_y = float ( x . mean ()) max_y = float ( x . max ()) min_y = float ( x . min ()) y_ave . append ( ave_y ) y_max . append ( max_y ) y_min . append ( min_y ) #\u6975\u7aef\u73fe\u8c61\u306e\u8a08\u7b97 if min_y == 0 : #\u9023\u7d9a\u964d\u96e8\u65e5\u6570 y = rain_data [ rain_data . index . year == A ] y = ( y [ \"Value\" ] . to_list ()) continuous_rain = max ( y ) con_r . append ( continuous_rain ) #\u9023\u7d9a\u5e72\u5929\u65e5\u6570 z = drought_data [ drought_data . index . year == A ] z = ( z [ \"Value\" ] . to_list ()) continuous_drought = max ( z ) con_d . append ( continuous_drought ) #\u7570\u5e38\u964d\u96e8\u65e5\u6570(30mm\u4ee5\u4e0a) bool3 = ( x >= 30 ) abonormal_rain = bool3 . sum () abn_r . append ( abonormal_rain ) else : #\u7570\u5e38\u9ad8\u6e29\u65e5\u6570(35\u2103\u4ee5\u4e0a) bool4 = ( x >= 35 ) abnormal_temperature = bool4 . sum () abn_t . append ( abnormal_temperature ) A = A + 1 #\u6708\u3054\u3068\u306e\u6700\u9ad8\u6700\u4f4e\u306e\u5e73\u5747 t = 0 while t < 12 : max_ave . append ( sum ( np . array ( m_max )[:, t ]) / period ) min_ave . append ( sum ( np . array ( m_min )[:, t ]) / period ) t = t + 1 #\u5168\u4f53\u306e\u5e73\u5747\u30fb\u6700\u9ad8\u306e\u5e73\u5747\u30fb\u6700\u4f4e\u306e\u5e73\u5747\u306e\u8a08\u7b97 cal_a . append ( sum ( y_ave ) / period ) cal_a . append ( sum ( y_max ) / period ) cal_a . append ( sum ( y_min ) / period ) cr = float ( sum ( con_r [ 1 :]) / ( period - 1 )) cd = float ( sum ( con_d [ 1 :]) / ( period - 1 )) ar = float ( sum ( abn_r ) / period ) at = float ( sum ( abn_t ) / period ) #\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4f5c\u6210 df_m_ave = pd . DataFrame ( m_ave , columns = pd . Index ( m_index ), index = pd . Index ( y_index )) df_m_max = pd . DataFrame ( m_max , columns = pd . Index ( m_index ), index = pd . Index ( y_index )) df_m_min = pd . DataFrame ( m_min , columns = pd . Index ( m_index ), index = pd . Index ( y_index )) df_m_sum = pd . DataFrame ( m_sum , columns = pd . Index ( m_index ), index = pd . Index ( y_index )) df_y = pd . DataFrame ([ y_ave , y_max , y_min , y_index ], index = [ \"Ave\" , \"Max\" , \"Min\" , \"Year\" ]) df_y = df_y . T . set_index ( \"Year\" ) df_max_ave = pd . DataFrame ( max_ave ) df_min_ave = pd . DataFrame ( min_ave ) df_cal = pd . DataFrame ( cal_a ) df_place = pd . DataFrame ( place ) df_ext_w = pd . DataFrame ([ cr , cd , ar , at ], index = [ \"Continuous Rain\" , \"Continuous Drought\" , \"Abnormal Rain\" , \"Abnormal Temperature\" ]) #\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f pd . DataFrame ([ \"Ave\" ]) . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 2 , startcol = 9 ) pd . DataFrame ([ \"Max\" ]) . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 69 , startcol = 9 ) pd . DataFrame ([ \"Min\" ]) . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 136 , startcol = 9 ) pd . DataFrame ([ \"Sum\" ]) . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 203 , startcol = 9 ) raw_data . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 2 , startcol = 1 ) df_y . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 2 , startcol = 4 ) df_place . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 1 , startcol = 1 ) df_cal . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 1 , startcol = 5 ) df_per . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 69 , startcol = 4 ) df_m_ave . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 2 , startcol = 9 ) df_m_max . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 69 , startcol = 9 ) df_m_min . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 136 , startcol = 9 ) df_m_sum . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 203 , startcol = 9 ) mon_ave . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 1 , startcol = 10 ) df_max_ave . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 68 , startcol = 10 ) df_min_ave . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 135 , startcol = 10 ) sum_ave . T . to_excel ( writer , sheet_name = sheet , index = False , header = False , startrow = 202 , startcol = 10 ) df_ext_w . to_excel ( writer , sheet_name = sheet , index = True , header = True , startrow = 78 , startcol = 4 ) writer . save () #\u30c7\u30fc\u30bf\u307e\u3068\u3081\u30b7\u30fc\u30c8\u306e\u4f5c\u6210 writer2 = pd . ExcelWriter ( fileName2 ) prof_data = place prof_data . append ( n_grid ) summary_table1 = [] summary_table2 = [] summary_table3 = [] index_st1 = [ \"\u65e5\u5e73\u5747\u6c17\u6e29\" , \"\u65e5\u6700\u9ad8\u6c17\u6e29\" , \"\u65e5\u6700\u4f4e\u6c17\u6e29\" , \"\u65e5\u6700\u5927\u964d\u6c34\u91cf\" , \"\u65e5\u6700\u5c11\u964d\u6c34\u91cf\" , \"\u9023\u7d9a\u964d\u96e8\u65e5\u6570\" , \"\u9023\u7d9a\u5e72\u5929\u65e5\u6570\" , \"\u7570\u5e38\u9ad8\u6e29\u65e5\u6570\" , \"\u7570\u5e38\u964d\u6c34\u65e5\u6570\" ] index_st2 = [ \"\u6708\u5225\u5e73\u5747\u6c17\u6e29\" , \"\u6708\u5225\u6700\u9ad8\u6c17\u6e29\" , \"\u6708\u5225\u6700\u4f4e\u6c17\u6e29\" ] index_st3 = [ \"\u6708\u5225\u964d\u6c34\u91cf\" ] df_sheet_all = pd . read_excel ( '\u30c7\u30fc\u30bf\u307e\u3068\u3081_\u30e2\u30c7\u30eb\u540d_\u56fd\u540d.xlsx' , sheet_name = None , index_col = 0 ) for i in df_sheet_all . keys (): if \"\u5e73\u5747\u6c17\u6e29\" in i : TAve = i elif \"\u6700\u9ad8\u6c17\u6e29\" in i : TMax = i elif \"\u6700\u4f4e\u6c17\u6e29\" in i : TMin = i else : Pre = i df_Tave = df_sheet_all [ TAve ] df_TMax = df_sheet_all [ TMax ] df_TMin = df_sheet_all [ TMin ] df_Pre = df_sheet_all [ Pre ] summary_table1 . append ( df_Tave . iloc [ 0 , 4 ]) summary_table1 . append ( df_TMax . iloc [ 0 , 4 ]) summary_table1 . append ( df_TMin . iloc [ 0 , 4 ]) summary_table1 . append ( df_Pre . iloc [ 0 , 5 ]) summary_table1 . append ( df_Pre . iloc [ 0 , 6 ]) summary_table1 . append ( df_Pre . iloc [ 78 , 4 ]) summary_table1 . append ( df_Pre . iloc [ 79 , 4 ]) summary_table1 . append ( df_TMax . iloc [ 81 , 4 ]) summary_table1 . append ( df_Pre . iloc [ 80 , 4 ]) summary_table2 . append ( df_Tave . iloc [ 0 , 9 : 21 ] . to_list ()) summary_table2 . append ( df_TMax . iloc [ 67 , 9 : 21 ] . to_list ()) summary_table2 . append ( df_TMin . iloc [ 134 , 9 : 21 ] . to_list ()) summary_table3 . append ( df_Pre . iloc [ 201 , 9 : 21 ] . to_list ()) df_summary1 = pd . DataFrame ( summary_table1 , index = pd . Index ( index_st1 )) df_summary2 = pd . DataFrame ( summary_table2 , index = pd . Index ( index_st2 ), columns = pd . Index ( m_index )) df_summary3 = pd . DataFrame ( summary_table3 , index = pd . Index ( index_st3 ), columns = pd . Index ( m_index )) df_prof_data = pd . DataFrame ( prof_data , index = [ \"\u7def\u5ea6\" , \"\u7d4c\u5ea6\" , \"\u30b0\u30ea\u30c3\u30c9\u756a\u53f7\" ]) df_summary1 . to_excel ( writer2 , sheet_name = \"\u307e\u3068\u3081\" , index = True , header = False , startrow = 1 , startcol = 1 ) df_summary2 . to_excel ( writer2 , sheet_name = \"\u307e\u3068\u3081\" , index = True , header = True , startrow = 1 , startcol = 4 ) df_summary3 . to_excel ( writer2 , sheet_name = \"\u307e\u3068\u3081\" , index = True , header = True , startrow = 6 , startcol = 4 ) df_prof_data . to_excel ( writer2 , sheet_name = \"\u307e\u3068\u3081\" , index = True , header = False , startrow = 11 , startcol = 1 ) writer2 . save () print ( \"Completed\" )","title":"\u30fb\u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u3088\u3046"}]}